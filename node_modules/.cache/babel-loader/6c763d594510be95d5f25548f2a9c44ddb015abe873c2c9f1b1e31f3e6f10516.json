{"ast":null,"code":"var _jsxFileName = \"/Users/albertz/Desktop/EC463_mini_project/2024-mini/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport { ref, get, child } from 'firebase/database'; // Firebase Database functions\nimport { database } from './firebase'; // Import the initialized database instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const [email, setEmail] = useState('jknee-at-bu-dot-edu');\n  useEffect(() => {\n    // Function to fetch data from Firebase\n    const fetchData = async () => {\n      try {\n        const dbRef = ref(database);\n        console.log('Fetching data for:', email);\n        const snapshot = await get(child(dbRef, `/${email}`));\n        if (snapshot.exists()) {\n          const firebaseData = snapshot.val();\n          console.log('Raw data from Firebase:', firebaseData);\n          const formattedData = Object.keys(firebaseData).map(key => ({\n            id: key,\n            ...firebaseData[key]\n          }));\n          setData(formattedData); // Store the array of data\n        } else {\n          console.log('No data available for this path:', `/${email}`);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [email]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Data from Firebase for \", email, \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(data, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ecsgXS8HzMN4QBKL9Em0yzvSSqo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ref","get","child","database","jsxDEV","_jsxDEV","App","_s","data","setData","email","setEmail","fetchData","dbRef","console","log","snapshot","exists","firebaseData","val","formattedData","Object","keys","map","key","id","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/albertz/Desktop/EC463_mini_project/2024-mini/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from 'react';\nimport { ref, get, child } from 'firebase/database'; // Firebase Database functions\nimport { database } from './firebase';  // Import the initialized database instance\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [email, setEmail] = useState('jknee-at-bu-dot-edu'); \n\n  useEffect(() => {\n    // Function to fetch data from Firebase\n    const fetchData = async () => {\n      try {\n        const dbRef = ref(database);\n        console.log('Fetching data for:', email);\n        const snapshot = await get(child(dbRef, `/${email}`));\n        if (snapshot.exists()) {\n          const firebaseData = snapshot.val();\n          console.log('Raw data from Firebase:', firebaseData);\n          const formattedData = Object.keys(firebaseData).map(key => ({\n            id: key,\n            ...firebaseData[key]\n          }));\n          setData(formattedData);  // Store the array of data\n        } else {\n          console.log('No data available for this path:', `/${email}`);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, [email]);\n\n  return (\n    <div className=\"App\">\n      <h1>Data from Firebase for {email}:</h1>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,GAAG,EAAEC,KAAK,QAAQ,mBAAmB,CAAC,CAAC;AACrD,SAASC,QAAQ,QAAQ,YAAY,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,qBAAqB,CAAC;EAEzDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,KAAK,GAAGb,GAAG,CAACG,QAAQ,CAAC;QAC3BW,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEL,KAAK,CAAC;QACxC,MAAMM,QAAQ,GAAG,MAAMf,GAAG,CAACC,KAAK,CAACW,KAAK,EAAE,IAAIH,KAAK,EAAE,CAAC,CAAC;QACrD,IAAIM,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;UACrB,MAAMC,YAAY,GAAGF,QAAQ,CAACG,GAAG,CAAC,CAAC;UACnCL,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEG,YAAY,CAAC;UACpD,MAAME,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACJ,YAAY,CAAC,CAACK,GAAG,CAACC,GAAG,KAAK;YAC1DC,EAAE,EAAED,GAAG;YACP,GAAGN,YAAY,CAACM,GAAG;UACrB,CAAC,CAAC,CAAC;UACHf,OAAO,CAACW,aAAa,CAAC,CAAC,CAAE;QAC3B,CAAC,MAAM;UACLN,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE,IAAIL,KAAK,EAAE,CAAC;QAC9D;MACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;QACdZ,OAAO,CAACY,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDd,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACF,KAAK,CAAC,CAAC;EAEX,oBACEL,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBvB,OAAA;MAAAuB,QAAA,GAAI,yBAAuB,EAAClB,KAAK,EAAC,GAAC;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxC3B,OAAA;MAAAuB,QAAA,EAAMK,IAAI,CAACC,SAAS,CAAC1B,IAAI,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV;AAACzB,EAAA,CApCQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}