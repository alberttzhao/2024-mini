{"ast":null,"code":"var _jsxFileName = \"/Users/albertz/Desktop/EC463_mini_project/2024-mini/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ref, get, child } from 'firebase/database'; // Firebase Database functions\nimport { database } from './firebase'; // Import the initialized database instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState(null); // Will store the data fetched from Firebase\n  const [email, setEmail] = useState(''); // Will store the user's input\n  const [error, setError] = useState(''); // Will store any error messages\n\n  // Function to fetch data when the form is submitted\n  const fetchData = async e => {\n    e.preventDefault(); // Prevent page refresh on form submission\n    setError(''); // Reset error message\n\n    try {\n      const dbRef = ref(database);\n      const formattedEmail = email.replace(/\\./g, '-dot-'); // Replace '.' with '-dot-' if needed\n      const snapshot = await get(child(dbRef, `/${formattedEmail}`)); // Query the database\n\n      if (snapshot.exists()) {\n        const firebaseData = snapshot.val();\n        setData(Object.keys(firebaseData).map(key => ({\n          id: key,\n          ...firebaseData[key]\n        })));\n      } else {\n        setData(null); // Clear previous data\n        setError('User does not exist'); // Set error message if no data found\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setError('Something went wrong'); // Generic error message\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Check User Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: fetchData,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enter email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: email,\n          onChange: e => setEmail(e.target.value) // Update the email state on input change\n          ,\n          placeholder: \"Enter email address\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Fetch Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Data for \", email, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(data, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MMhcl0UNRcsxHCjMia5Q5eoF6vY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ref","get","child","database","jsxDEV","_jsxDEV","App","_s","data","setData","email","setEmail","error","setError","fetchData","e","preventDefault","dbRef","formattedEmail","replace","snapshot","exists","firebaseData","val","Object","keys","map","key","id","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","style","color","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/albertz/Desktop/EC463_mini_project/2024-mini/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { ref, get, child } from 'firebase/database';  // Firebase Database functions\nimport { database } from './firebase';  // Import the initialized database instance\n\nfunction App() {\n  const [data, setData] = useState(null);  // Will store the data fetched from Firebase\n  const [email, setEmail] = useState('');  // Will store the user's input\n  const [error, setError] = useState('');  // Will store any error messages\n\n  // Function to fetch data when the form is submitted\n  const fetchData = async (e) => {\n    e.preventDefault();  // Prevent page refresh on form submission\n    setError('');  // Reset error message\n\n    try {\n      const dbRef = ref(database);\n      const formattedEmail = email.replace(/\\./g, '-dot-');  // Replace '.' with '-dot-' if needed\n      const snapshot = await get(child(dbRef, `/${formattedEmail}`));  // Query the database\n\n      if (snapshot.exists()) {\n        const firebaseData = snapshot.val();\n        setData(Object.keys(firebaseData).map(key => ({\n          id: key,\n          ...firebaseData[key]\n        })));\n      } else {\n        setData(null);  // Clear previous data\n        setError('User does not exist');  // Set error message if no data found\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setError('Something went wrong');  // Generic error message\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Check User Data</h1>\n\n      {/* Form for inputting email */}\n      <form onSubmit={fetchData}>\n        <label>\n          Enter email:\n          <input\n            type=\"text\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}  // Update the email state on input change\n            placeholder=\"Enter email address\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Fetch Data</button>\n      </form>\n\n      {/* Display error if user doesn't exist */}\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n\n      {/* Display the fetched data */}\n      {data && (\n        <div>\n          <h2>Data for {email}:</h2>\n          <pre>{JSON.stringify(data, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,GAAG,EAAEC,GAAG,EAAEC,KAAK,QAAQ,mBAAmB,CAAC,CAAE;AACtD,SAASC,QAAQ,QAAQ,YAAY,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EACzC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACzC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAEzC;EACA,MAAMe,SAAS,GAAG,MAAOC,CAAC,IAAK;IAC7BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAE;IACrBH,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;IAEf,IAAI;MACF,MAAMI,KAAK,GAAGjB,GAAG,CAACG,QAAQ,CAAC;MAC3B,MAAMe,cAAc,GAAGR,KAAK,CAACS,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAE;MACvD,MAAMC,QAAQ,GAAG,MAAMnB,GAAG,CAACC,KAAK,CAACe,KAAK,EAAE,IAAIC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAE;;MAEjE,IAAIE,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE;QACrB,MAAMC,YAAY,GAAGF,QAAQ,CAACG,GAAG,CAAC,CAAC;QACnCd,OAAO,CAACe,MAAM,CAACC,IAAI,CAACH,YAAY,CAAC,CAACI,GAAG,CAACC,GAAG,KAAK;UAC5CC,EAAE,EAAED,GAAG;UACP,GAAGL,YAAY,CAACK,GAAG;QACrB,CAAC,CAAC,CAAC,CAAC;MACN,CAAC,MAAM;QACLlB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAE;QAChBI,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAE;MACpC;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdiB,OAAO,CAACjB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,CAAE;IACrC;EACF,CAAC;EAED,oBACER,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB1B,OAAA;MAAA0B,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGxB9B,OAAA;MAAM+B,QAAQ,EAAEtB,SAAU;MAAAiB,QAAA,gBACxB1B,OAAA;QAAA0B,QAAA,GAAO,cAEL,eAAA1B,OAAA;UACEgC,IAAI,EAAC,MAAM;UACXC,KAAK,EAAE5B,KAAM;UACb6B,QAAQ,EAAGxB,CAAC,IAAKJ,QAAQ,CAACI,CAAC,CAACyB,MAAM,CAACF,KAAK,CAAE,CAAE;UAAA;UAC5CG,WAAW,EAAC,qBAAqB;UACjCC,QAAQ;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACR9B,OAAA;QAAQgC,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,EAGNvB,KAAK,iBAAIP,OAAA;MAAGsC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAb,QAAA,EAAEnB;IAAK;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAGhD3B,IAAI,iBACHH,OAAA;MAAA0B,QAAA,gBACE1B,OAAA;QAAA0B,QAAA,GAAI,WAAS,EAACrB,KAAK,EAAC,GAAC;MAAA;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1B9B,OAAA;QAAA0B,QAAA,EAAMc,IAAI,CAACC,SAAS,CAACtC,IAAI,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC5B,EAAA,CA9DQD,GAAG;AAAAyC,EAAA,GAAHzC,GAAG;AAgEZ,eAAeA,GAAG;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}